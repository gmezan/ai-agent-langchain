name: 'Azure Terraform Plan/Apply - Optimized Secret Management'

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - '.github/workflows/azure-plan-apply.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infra/**'
      - '.github/workflows/azure-plan-apply.yml'

permissions:
  id-token: write
  contents: read
  pull-requests: write

# Environment variables for Azure authentication and Terraform backend
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  AZ_TF_RG: "${{ secrets.AZ_TF_RG }}"
  AZ_TF_SA: "${{ secrets.AZ_TF_SA }}"
  # Key Vault configuration (Terraform reads secrets directly)
  CENTRAL_KEYVAULT_NAME: "${{ secrets.CENTRAL_KEYVAULT_NAME }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Azure CLI login using OIDC (only needed for Terraform backend authentication)
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      run: terraform init -backend-config="resource_group_name=$AZ_TF_RG" -backend-config="storage_account_name=$AZ_TF_SA"
      working-directory: ./infra

    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./infra

    # Pass Key Vault configuration to Terraform
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color \
          -var="central_keyvault_name=$CENTRAL_KEYVAULT_NAME" \
          -var="central_keyvault_resource_group=$AZ_TF_RG" \
          -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
      working-directory: ./infra
    
    - name: Encrypt Terraform Plan
      id: tf-plan-encrypt
      env:
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        gpg --batch "--passphrase=$ENCRYPTION_KEY" --symmetric --cipher-algo AES256 --digest-algo sha256 --s2k-mode 3 --s2k-digest-algo sha256 --s2k-count 65011712 tfplan
      working-directory: ./infra
        
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: tfplan
        path: infra/tfplan.gpg
        
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
      working-directory: ./infra
        
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
                
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: azure
    needs: [terraform-plan]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Azure CLI login using OIDC (only needed for Terraform backend authentication)
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      run: terraform init -backend-config="resource_group_name=$AZ_TF_RG" -backend-config="storage_account_name=$AZ_TF_SA"
      working-directory: ./infra

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: infra/

    - name: Decrypt Terraform Plan
      env:
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        gpg --batch "--passphrase=$ENCRYPTION_KEY" -o tfplan --decrypt tfplan.gpg
      working-directory: ./infra

    # Apply with Key Vault configuration
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve \
          -var="central_keyvault_name=$CENTRAL_KEYVAULT_NAME" \
          -var="central_keyvault_resource_group=$AZ_TF_RG" \
          tfplan
      working-directory: ./infra